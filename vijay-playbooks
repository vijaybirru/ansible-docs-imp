
---
- hosts: all
  tasks:
  - name: install git
    yum:
      name: git
      state: latest

---------------------------------------------------------------------------------------
---
- hosts: all
  tasks:
  - name: install httpd
    yum:
      name: httpd
      state: latest
-------------------------------------------------------
---
- hosts: all
  tasks:
  - name: service httpd stop and start
    service:
      name: httpd
      state: stopped
--------------------------------------------------------
---
- hosts: webserver
  tasks:
  - name: restart the httpd server
    service:
      name: httpd
      state: restarted
  - name: copy files from master to slave
    copy:
      src: /home/file1.txt
      dest: /usr/local/

-----------------------------------------------
How to call multiple plabooks using in single master playbook ?
---
- include: playbook1.yml
- include: playbook2.yml
- include: playbook3.yml

-------------------------------------------------------------------

 cat fetch.yml
---
- hosts: all
  tasks:
  - name: using a fetch module--same as copy but in revere way
    fetch:
      src: /usr/local/file1.txt
      dest: /usr/lib/JVM
------------------------------------------------
 cat user.yml ===== creating a user with password
 
---
- hosts: all
  tasks:
  - name: creating a user
    user:
      name: vijay1
      state: present
      password: 1234


-----------------------------------------
Standard Loops
To save some typing, repeated tasks can be written in short-hand like so:


 cat loop.yml
---
- hosts: all
  tasks:
  - name: trying looping concept
    user:
      name: "{{ item }}"
      state: present
    with_items:
      - user1
      - user2
      - user3



===================

Asynchronous Actions and Polling
By default tasks in playbooks block, meaning the connections stay open until the task is done on each node. This may not always be desirable, or you may be running operations that take longer than the SSH timeout.

To avoid blocking or timeout issues, you can use asynchronous mode to run all of your tasks at once and then poll until they are done.

To launch a task asynchronously, specify its maximum runtime and how frequently you would like to poll for status. The default poll value is 10 seconds if you do not specify a value for poll:

---

- hosts: all
  remote_user: root

  tasks:

  - name: simulate long running op (15 sec), wait for up to 45 sec, poll every 5 sec
    command: /bin/sleep 15
    async: 45
    poll: 5
    -------------------------------
Asynchronous Actions and Polling

[root@ip-172-31-35-49 ansible]# cat async.yml
---
- hosts: all
  tasks:
  - name: async actions and polling
    command: sleep 60
    async: 70
    poll: 5
  - name: touch
    command: touch /tmp/8899.txt


----------------------------------


ec2-creation

[root@ip-172-31-35-49 ansible]# cat ec2.yml
---
- name: Create a new Demo EC2 instance
  hosts: all
  gather_facts: False

  vars:
      region: us-west-2
      instance_type: t2.micro
      ami: ami-0b500ef59d8335eee  # Amazon AMI  16.04 LTS
      keypair: ansibbbb # pem file name

  tasks:

    - name: Create an ec2 instance
      ec2:
         key_name: "{{ keypair }}"
         group: default  # security group name
         instance_type: "{{ instance_type}}"
         image: "{{ ami }}"
         wait: true
         region: "{{ region }}"
         count: 1  # default
         count_tag:
            Name: Ansible-EC2-Demo
         instance_tags:
            Name: Ansible-EC2-Demo
         vpc_subnet_id: subnet-237f1059
         assign_public_ip: yes
         aws_access_key: AKIAJVFGUHOKTJFM6J4Q
         aws_secret_key: 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
      register: ec2




